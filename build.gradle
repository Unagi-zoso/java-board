plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.nightdiver'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest' // 기본 rest api 제공
    implementation 'org.springframework.data:spring-data-rest-hal-explorer' // 간단하게 rest api 확인 가능. /localhost:8080/[api base path]
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // view
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j' // spring boot 3.x.x 이상 MYSQL 커넥터
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // queryDSL 설정
    implementation 'com.querydsl:querydsl-jpa' // jpa, core 필수 의존성
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    // apt의 경우 스프링부트 3.0.0 이상 부터는 :jakarta 를 붙여줘야한다.
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties["querydsl.version"]}:jakarta" // 그루비 문법으로 버전 자동 기입되게
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api' // java.lang.NoClassDefFoundError (javax.annotation.Generated) 오류 해결
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.persistence.Entity) 오류 해결
}

tasks.named('test') {
    useJUnitPlatform()
}

// queryDSL 설정부 : 원래는 빌드파일에 QClass가 숨는데 이걸 generated 에 끄집어낸것
// Gradle 빌드에서 스캔하는 영역과 Intellij 같은 IDE에서 스캔하는 영역이 다르기 때문에 문제가 발생할 수 있다. 그래서 generated 로 빼서 사용한다.
// 구체적으론 각자 스캔을 하며 중복이 발생하고 똑같은 클래스를 또 불러오려하는 충돌이 발생한다.
def querydslDir = "src/main/generated"

// queryDSL QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

// gradle clean 시 QClass 디렉터리 삭제
clean {
    delete file(querydslDir)
}
